; _____        ____   ___
;   |     \/   ____| |___|
;   |     |   |   \  |   |
;---------------------------------------------------------------
; Copyright 2022, tyra - https://github.com/h4570/tyra
; Licensed under Apache License 2.0
; Sandro Sobczy≈Ñski <sandro.sobczynski@gmail.com>
;
;---------------------------------------------------------------
; Triangle list
; AsIs = NO TRANSFORM
; Texture, colors
;---------------------------------------------------------------

.syntax new
.name StaPipVU1As_Is_TC
.vu
.init_vf_all
.init_vi_all

#include "src/ps2/renderer/3d/pipeline/shared/vcl_sml.i"
#include "src/ps2/renderer/3d/pipeline/shared/tyra_macros.i"
#include "inc/ps2/renderer/3d/pipeline/static/core/programs/stapip_vu1_shared_defines.h"

#define STQ_STORE_OFFSET    0
#define RGBA_STORE_OFFSET   1
#define XYZ2_STORE_OFFSET   2

--enter
--endenter

#vuprog StaPipVU1AsIsTC

    LoadTyraStaticData{ gifSetTag }
    LoadTyraSingleColor{ singleColor, singleColorEnabled, VU1_SINGLE_COLOR_ADDR, VU1_OPTIONS_ADDR }
    LoadTyraTagsTexture{ lodGifTag, testsTag, texBufferClutGifTag, VU1_LOD_ADDR, VU1_Z_TESTS_ADDR, VU1_CLUT_ADDR }

begin:
    xtop buffer
    LoadTyraBufferTags{ scale, primTag, buffer }

    iaddiu  vertexData,         buffer,         VU1_STAPIP_VERT_DATA_ADDR
    ilw.w   vertexCount,        0(buffer)
    iadd    stqData,            vertexData,     vertexCount
    iadd    colorData,          stqData,        vertexCount
    iblez   singleColorEnabled, setDestAddrMultiColor
    iadd    kickAddress,        stqData,        vertexCount
    b       setDestAddr
setDestAddrMultiColor:
    iadd    kickAddress,        colorData,      vertexCount
setDestAddr:
    iaddiu  destAddress,        kickAddress,    0

    StoreTyraGifTagsTexture{ gifSetTag, lodGifTag, texBufferClutGifTag, primTag, testsTag, destAddress }

    ;--- Loop
    iadd vertexCounter, buffer, vertexCount
vertexLoop:

        iblez  singleColorEnabled, multiColor
        ;--- Load vertices single color
        add      color1,    vf00,   singleColor
        add      color2,    vf00,   singleColor
        add      color3,    vf00,   singleColor
        b processing

multiColor:
        ;--- Load vertices colors
        lq      color1,   (colorData)
        lq      color2,   1(colorData)
        lq      color3,   2(colorData)
        
processing:
        ;--- Load vertex1
        lq      vertex1,  (vertexData)
        lq      stq1,     (stqData)

        ;--- Load vertex2
        lq      vertex2,  1(vertexData)
        lq      stq2,     1(stqData)

        ;--- Load vertex3
        lq      vertex3,  2(vertexData)
        lq      stq3,     2(stqData)

        ;--- Calculate vertex1
        ScaleVertexToGSFormat{ scale, vertex1 }
        div q,  vf00[w],    vertex1[w]
        PerformTexturePerspectiveCorrection{ outputStq1, stq1 }
        FixColor{ color1 }

        ;--- Calculate vertex2
        ScaleVertexToGSFormat{ scale, vertex2 }
        div q,  vf00[w],    vertex2[w]
        PerformTexturePerspectiveCorrection{ outputStq2, stq2 }
        FixColor{ color2 }

        ;--- Calculate vertex3
        ScaleVertexToGSFormat{ scale, vertex3 }
        div q,  vf00[w],    vertex3[w]
        PerformTexturePerspectiveCorrection{ outputStq3, stq3 }
        FixColor{ color3 }

        iaddiu      adcBit,     VI00, 0x0
        isw.w       adcBit,     XYZ2_STORE_OFFSET(destAddress)
        isw.w       adcBit,     XYZ2_STORE_OFFSET+3(destAddress)
        isw.w       adcBit,     XYZ2_STORE_OFFSET+6(destAddress)

        ;--- Store vertex1
        sq      outputStq1,     STQ_STORE_OFFSET(destAddress)
        sq      color1,         RGBA_STORE_OFFSET(destAddress)
        sq.xyz  vertex1,        XYZ2_STORE_OFFSET(destAddress)

        ;--- Store vertex2
        sq      outputStq2,     STQ_STORE_OFFSET+3(destAddress)
        sq      color2,         RGBA_STORE_OFFSET+3(destAddress)
        sq.xyz  vertex2,        XYZ2_STORE_OFFSET+3(destAddress)

        ;--- Store vertex3
        sq      outputStq3,     STQ_STORE_OFFSET+6(destAddress)
        sq      color3,         RGBA_STORE_OFFSET+6(destAddress)
        sq.xyz  vertex3,        XYZ2_STORE_OFFSET+6(destAddress)

        ;-------------------------------

        iaddiu  vertexData,     vertexData,     3                         
        iaddiu  stqData,        stqData,        3  
        iaddiu  colorData,      colorData,      3  
        iaddiu  destAddress,    destAddress,    9

        ;--- Fix loop
        iaddi   vertexCounter,  vertexCounter,  -3  ; decrement the loop counter 
        ibne    vertexCounter,  buffer, vertexLoop  ; and repeat if needed

    xgkick kickAddress ; dispatch to the GS rasterizer.

--barrier ; Why the hell I must add barrier AFTER XGKICK? VCL does not adds E bit without it...
--cont

    b   begin

#endvuprog

--exit
--endexit
